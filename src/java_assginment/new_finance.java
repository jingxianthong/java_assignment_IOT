/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package java_assginment;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.IOException; 
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author thong
 */

public class new_finance extends javax.swing.JFrame {


    /**
     * Creates new form new_finance
     */
    public new_finance() {
        initComponents();
    }

    
    
private void loadTableData() {
    DefaultTableModel model = (DefaultTableModel) FIN_Table.getModel();
    File file = new File("src/User_data/Finance.txt");

    // Check if the file exists
    if (file.exists()) {
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            // Read each line and split it by the tab delimiter
            while ((line = br.readLine()) != null) {
                String[] data = line.split("\t");
                if (data.length == 4) { // Ensure the correct number of columns
                    model.addRow(data);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
    }
}

private void saveDataToFile() {
    DefaultTableModel model = (DefaultTableModel) FIN_Table.getModel();
    File file = new File("src/User_data/Finance.txt");

    try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
        for (int i = 0; i < model.getRowCount(); i++) {
            String row = model.getValueAt(i, 0) + "," +
                         model.getValueAt(i, 1) + "," +
                         model.getValueAt(i, 2) + "," +
                         model.getValueAt(i, 3);
            bw.write(row);
            bw.newLine();
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage());
    }
}    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        FIN_Table = new javax.swing.JTable();
        Insert_new_data = new javax.swing.JButton();
        Delete_row = new javax.swing.JButton();
        Edit_row = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        FIN_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Verify Purchase", "Stock Check", "Payment make", "Supplier"
            }
        ));
        jScrollPane1.setViewportView(FIN_Table);

        Insert_new_data.setText("Insert new data");
        Insert_new_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_new_dataActionPerformed(evt);
            }
        });

        Delete_row.setText("Delete Row");
        Delete_row.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_rowActionPerformed(evt);
            }
        });

        Edit_row.setText("Edit Row");
        Edit_row.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_rowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Delete_row)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Edit_row)
                            .addComponent(Insert_new_data))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Edit_row, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Delete_row)
                .addGap(30, 30, 30)
                .addComponent(Insert_new_data)
                .addGap(94, 94, 94))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Insert_new_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_new_dataActionPerformed
    DefaultTableModel model = (DefaultTableModel) FIN_Table.getModel();

    // Collect data from user input
    String verifyPurchase = JOptionPane.showInputDialog(this, "Enter Verify Purchase:");
    String stockCheck = JOptionPane.showInputDialog(this, "Enter Stock Check:");
    String paymentMake = JOptionPane.showInputDialog(this, "Enter Payment make:");
    String supplier = JOptionPane.showInputDialog(this, "Enter Supplier:");

    // Validate inputs and add data to the table
    if (verifyPurchase != null && !verifyPurchase.isEmpty() &&
        stockCheck != null && !stockCheck.isEmpty() &&
        paymentMake != null && !paymentMake.isEmpty() &&
        supplier != null && !supplier.isEmpty()) {

        // Add data to the table
        model.addRow(new Object[]{verifyPurchase, stockCheck, paymentMake, supplier});

        // Save data to file
        try {
            File file = new File("src/User_data/Finance.txt");
            // Create the directory if it doesn't exist
            if (!file.getParentFile().exists()) {
                file.getParentFile().mkdirs();  // Create the "User_data" directory if it doesn't exist
            }

            // Create the file if it doesn't exist
            if (!file.exists()) {
                file.createNewFile();
            }

            // Open the file in append mode
            FileWriter writer = new FileWriter(file, true);
            BufferedWriter bufferedWriter = new BufferedWriter(writer);

            // Write the new data to the file
            bufferedWriter.write(verifyPurchase + "\t" + stockCheck + "\t" + paymentMake + "\t" + supplier);
            bufferedWriter.newLine();  // Add a newline for the next entry

            // Close the writer
            bufferedWriter.close();
            
            JOptionPane.showMessageDialog(this, "Data saved successfully!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "All fields must be filled.");
    }
    }//GEN-LAST:event_Insert_new_dataActionPerformed

    private void Edit_rowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_rowActionPerformed
    int selectedRow = FIN_Table.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to edit.");
        return;
    }

    DefaultTableModel model = (DefaultTableModel) FIN_Table.getModel();

    // Get current values
    String verifyPurchase = JOptionPane.showInputDialog(this, "Enter Verify Purchase:", model.getValueAt(selectedRow, 0));
    String stockCheck = JOptionPane.showInputDialog(this, "Enter Stock Check:", model.getValueAt(selectedRow, 1));
    String paymentMake = JOptionPane.showInputDialog(this, "Enter Payment make:", model.getValueAt(selectedRow, 2));
    String supplier = JOptionPane.showInputDialog(this, "Enter Supplier:", model.getValueAt(selectedRow, 3));

    if (verifyPurchase != null && stockCheck != null && paymentMake != null && supplier != null) {
        model.setValueAt(verifyPurchase, selectedRow, 0);
        model.setValueAt(stockCheck, selectedRow, 1);
        model.setValueAt(paymentMake, selectedRow, 2);
        model.setValueAt(supplier, selectedRow, 3);
        
        // Save updated data to file
        saveDataToFile();
    } else {
        JOptionPane.showMessageDialog(this, "All fields must be filled.");
    }

    }//GEN-LAST:event_Edit_rowActionPerformed

    private void Delete_rowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_rowActionPerformed
    int selectedRow = FIN_Table.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        return;
}

    DefaultTableModel model = (DefaultTableModel) FIN_Table.getModel();
    model.removeRow(selectedRow);
    
    // Save updated data to file
    saveDataToFile();

    }//GEN-LAST:event_Delete_rowActionPerformed

    /**
     * @param args the command line arguments
     */
public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    java.awt.EventQueue.invokeLater(() -> {
        new_finance financeApp = new new_finance();
        financeApp.setVisible(true);
        financeApp.loadTableData(); // Load data when the application starts
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete_row;
    private javax.swing.JButton Edit_row;
    private javax.swing.JTable FIN_Table;
    private javax.swing.JButton Insert_new_data;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}