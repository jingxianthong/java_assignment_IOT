/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package java_assginment;


import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author thong
 */
public class Finance_Manager_page extends javax.swing.JFrame {

    private final String FILE_Finance_data = "User_data/Finance_manager_data.txt";
    private final String FILE_Stock_data = "src/User_data/Stock_data.txt";
    private final String FILE_Supplier_data = "src/User_data/Supplier_payments.txt";
    private final String FILE_Purchase_Order = "src/User_data/PurchaseOrders.txt";


    
    /**
     * Creates new form Finance_Manager_page
     */
    public Finance_Manager_page() {
        initComponents();
            Insert_new_data.addActionListener(e -> insertNewData());
            /**  Refresh_button.addActionListener(e -> loadDataFromFile());  **/
        loadDataFromFile();
        
        
        
        
    }

    private void loadDataFromFile(){
     DefaultTableModel model = (DefaultTableModel) FIN_Table.getModel();  
     model.setRowCount(0);
     File file =  new File(FILE_Finance_data);
     
     if (file.exists()){
         try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) !=  null){
                String[] data = line.split(",");
                model.addRow(data);
            }
            
         }catch(IOException e){
             JOptionPane.showMessageDialog(this,"Error reading file:" +e.getMessage());
     }
    }
    }
    private void SaveDataTOfile(){
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_Finance_data))) {
            DefaultTableModel model = (DefaultTableModel) FIN_Table.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    bw.write(model.getValueAt(i, j).toString());
                    if (j < model.getColumnCount() - 1) {
                        bw.write(",");
                }
                }
                bw.newLine();
        }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing file: " + e.getMessage());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        FIN_Table = new javax.swing.JTable();
        Insert_new_data = new javax.swing.JButton();
        Verify_Purchase_Order = new javax.swing.JButton();
        Check_Stock = new javax.swing.JButton();
        Make_Payment = new javax.swing.JButton();
        View_Supplier_Payment = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        FIN_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Verify Purchase", "Stock Check", "Payment make", "Supplier"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(FIN_Table);

        Insert_new_data.setText("Insert new data");
        Insert_new_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insert_new_dataActionPerformed(evt);
            }
        });

        Verify_Purchase_Order.setText("Verify Purchase Order");
        Verify_Purchase_Order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Verify_Purchase_OrderActionPerformed(evt);
            }
        });

        Check_Stock.setText("Check Stock");
        Check_Stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Check_StockActionPerformed(evt);
            }
        });

        Make_Payment.setText("Make Payment");
        Make_Payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Make_PaymentActionPerformed(evt);
            }
        });

        View_Supplier_Payment.setText("View Supplier Payment");
        View_Supplier_Payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                View_Supplier_PaymentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Insert_new_data)
                    .addComponent(Verify_Purchase_Order)
                    .addComponent(Check_Stock)
                    .addComponent(Make_Payment)
                    .addComponent(View_Supplier_Payment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(View_Supplier_Payment)
                        .addGap(18, 18, 18)
                        .addComponent(Make_Payment)
                        .addGap(18, 18, 18)
                        .addComponent(Check_Stock)
                        .addGap(18, 18, 18)
                        .addComponent(Verify_Purchase_Order)
                        .addGap(18, 18, 18)
                        .addComponent(Insert_new_data)
                        .addGap(143, 143, 143))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(61, Short.MAX_VALUE))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void Insert_new_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insert_new_dataActionPerformed
        // TODO add your handling code here:
        
        File file = new File(FILE_Finance_data);
        File parentDir = file.getParentFile();
        if (!parentDir.exists()) {
            parentDir.mkdirs();
        }
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error creating file: " + e.getMessage());
            }
            }
            
            String verifyPurchase = JOptionPane.showInputDialog(this, "Enter Verify Purchase:");
            String stockCheck = JOptionPane.showInputDialog(this, "Enter Stock Check:");
            String paymentMake = JOptionPane.showInputDialog(this, "Enter Payment make:");
            String supplier = JOptionPane.showInputDialog(this, "Enter Supplier:");

            DefaultTableModel model = (DefaultTableModel) FIN_Table.getModel();

        
        if (verifyPurchase != null && !verifyPurchase.isEmpty() &&
            stockCheck != null && !stockCheck.isEmpty() &&
            paymentMake != null && !paymentMake.isEmpty() &&
            supplier != null && !supplier.isEmpty()) {
            model.addRow(new Object[]{verifyPurchase, stockCheck, paymentMake, supplier});
            SaveDataTOfile();
        } else {
            JOptionPane.showMessageDialog(this, "All fields must be filled.");
}
    }//GEN-LAST:event_Insert_new_dataActionPerformed

    private void Verify_Purchase_OrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Verify_Purchase_OrderActionPerformed
    String purchaseID = JOptionPane.showInputDialog(this, "Enter Purchase Order ID to verify:");
    
    if (purchaseID == null || purchaseID.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Purchase Order ID cannot be empty.");
        return;
    }
    
    File poFile = new File(FILE_Purchase_Order); // Example file where POs are stored
    boolean poFound = false;

    try (BufferedReader br = new BufferedReader(new FileReader(poFile))) {
        String line;
        while ((line = br.readLine()) != null) {
            if (line.startsWith(purchaseID + ",")) { // Assuming POs are stored as ID,Details
                poFound = true;
                break;
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error reading the purchase orders file: " + e.getMessage());
        return;
    }
    
    if (poFound) {
        JOptionPane.showMessageDialog(this, "Purchase Order " + purchaseID + " verified successfully.");
        // Logic to update status can be added here
    } else {
        JOptionPane.showMessageDialog(this, "Purchase Order ID " + purchaseID + " not found.");
    }      
       
    
    }//GEN-LAST:event_Verify_Purchase_OrderActionPerformed

    private void Check_StockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Check_StockActionPerformed
    File stockFile = new File(FILE_Stock_data);
    if (stockFile.exists()) {
        try (BufferedReader br = new BufferedReader(new FileReader(stockFile))) {
            StringBuilder stockData = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                stockData.append(line).append("\n");
            }
            JOptionPane.showMessageDialog(this, stockData.toString(), "Stock Details", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading stock data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Stock file not found.");
    }        
        
    }//GEN-LAST:event_Check_StockActionPerformed

    private void Make_PaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Make_PaymentActionPerformed
    String supplierName = JOptionPane.showInputDialog(this, "Enter Supplier Name:");
    
    if (supplierName == null || supplierName.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Supplier Name cannot be empty.");
        return;
    }

    String amountStr;
    float amount = 0;
    do {
        amountStr = JOptionPane.showInputDialog(this, "Enter Payment Amount (numeric value):");
        if (amountStr == null || amountStr.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Payment Amount cannot be empty.");
            return;
        }
        try {
            amount = Float.parseFloat(amountStr);
            if (amount <= 0) {
                JOptionPane.showMessageDialog(this, "Amount must be greater than 0.");
                amountStr = null; // Trigger loop again
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid amount. Please enter a numeric value.");
            amountStr = null; // Trigger loop again
        }
    } while (amountStr == null);

    String stockNumberStr;
    int stockNumber = 0;
    do {
        stockNumberStr = JOptionPane.showInputDialog(this, "Enter Stock Number (integer value):");
        if (stockNumberStr == null || stockNumberStr.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Stock Number cannot be empty.");
            return;
        }
        try {
            stockNumber = Integer.parseInt(stockNumberStr);
            if (stockNumber <= 0) {
                JOptionPane.showMessageDialog(this, "Stock Number must be a positive integer.");
                stockNumberStr = null; // Trigger loop again
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid stock number. Please enter an integer value.");
            stockNumberStr = null; // Trigger loop again
        }
    } while (stockNumberStr == null);

    String paymentDate = new Date().toString(); // Capture the current date and time

    File paymentsFile = new File(FILE_Supplier_data);
    File parentDir = paymentsFile.getParentFile();
    if (parentDir != null && !parentDir.exists()) {
        parentDir.mkdirs(); // Create the directory if it does not exist
    }

    try (BufferedWriter bw = new BufferedWriter(new FileWriter(paymentsFile, true))) {
        // Write supplier name, amount, stock number, and payment date
        bw.write(supplierName + "," + amount + "," + stockNumber + "," + paymentDate);
        bw.newLine();
        JOptionPane.showMessageDialog(this, "Payment of " + amount + " made to " + supplierName + " for Stock Number " + stockNumber + ".");
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error writing to payments file: " + e.getMessage());
    }
    
    }//GEN-LAST:event_Make_PaymentActionPerformed

    private void View_Supplier_PaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_View_Supplier_PaymentActionPerformed
    File paymentsFile = new File(FILE_Supplier_data);
    if (paymentsFile.exists()) {
        try (BufferedReader br = new BufferedReader(new FileReader(paymentsFile))) {
            StringBuilder paymentsData = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                paymentsData.append(line).append("\n");
            }
            JOptionPane.showMessageDialog(this, paymentsData.toString(), "Supplier Payments", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading payments data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Payments file not found.");
    }
    
    }//GEN-LAST:event_View_Supplier_PaymentActionPerformed

    
    private void insertNewData() {
        DefaultTableModel model = (DefaultTableModel) FIN_Table.getModel();
        String verifyPurchase = JOptionPane.showInputDialog(this, "Enter Verify Purchase:");
        String stockCheck = JOptionPane.showInputDialog(this, "Enter Stock Check:");
        String paymentMake = JOptionPane.showInputDialog(this, "Enter Payment make:");
        String supplier = JOptionPane.showInputDialog(this, "Enter Supplier:");

        if (verifyPurchase != null && stockCheck != null && paymentMake != null && supplier != null) {
            model.addRow(new Object[]{verifyPurchase, stockCheck, paymentMake, supplier});
            SaveDataTOfile(); // Save the updated data to the file
        }
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> new Finance_Manager_page().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Check_Stock;
    private javax.swing.JTable FIN_Table;
    private javax.swing.JButton Insert_new_data;
    private javax.swing.JButton Make_Payment;
    private javax.swing.JButton Verify_Purchase_Order;
    private javax.swing.JButton View_Supplier_Payment;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
