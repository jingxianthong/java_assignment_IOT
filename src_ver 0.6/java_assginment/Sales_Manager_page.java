/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package java_assginment;


import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
 

/**
 *
 * @author thong
 */
public class Sales_Manager_page extends javax.swing.JFrame {
    
    
    private static final String FILE_Item_Inventory = "src/User_data/ItemInventory.txt";
    private static final String FILE_Daily_Sales = "src/User_data/DailySales.txt";
    private static final String FILE_Requisitions = "src/User_data/Requisitions.txt";
    private static final String FILE_Stock = "src/User_data/Stock_data.txt";
    private final String FILE_Purchase_Order = "src/User_data/PurchaseOrders.txt";
    private final String FILE_Sale_Report = "src/User_data/Sale_report.txt";


    /**
     * Creates new form Sales_Manager_page
     */
    public Sales_Manager_page() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        View_Items = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        Edit = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        Sales_Report = new javax.swing.JButton();
        Check_Stock = new javax.swing.JButton();
        Requisitions = new javax.swing.JButton();
        Purchase_Orders = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Sale_manager_Table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        View_Items.setText("View Items ");
        View_Items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                View_ItemsActionPerformed(evt);
            }
        });
        getContentPane().add(View_Items, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, -1, -1));

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        getContentPane().add(Delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, -1, -1));

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        getContentPane().add(Save, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, -1, -1));

        Edit.setText("Edit");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });
        getContentPane().add(Edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, -1, -1));

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        getContentPane().add(Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, -1, -1));

        Sales_Report.setText("Sales Report");
        Sales_Report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Sales_ReportActionPerformed(evt);
            }
        });
        getContentPane().add(Sales_Report, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, -1, -1));

        Check_Stock.setText("Check Stock ");
        Check_Stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Check_StockActionPerformed(evt);
            }
        });
        getContentPane().add(Check_Stock, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 270, -1, -1));

        Requisitions.setText("Requisitions ");
        Requisitions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RequisitionsActionPerformed(evt);
            }
        });
        getContentPane().add(Requisitions, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 310, -1, -1));

        Purchase_Orders.setText("Purchase Orders");
        Purchase_Orders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Purchase_OrdersActionPerformed(evt);
            }
        });
        getContentPane().add(Purchase_Orders, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 350, -1, -1));

        Sale_manager_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Sale_manager_Table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\thong\\OneDrive - Asia Pacific University\\Documents\\NetBeansProjects\\Java_Assginment\\src\\image_file\\minecraft image.jpg")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 740, 420));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Check_StockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Check_StockActionPerformed
    
        
    File itemsFile = new File(FILE_Item_Inventory);

    // Check if the file exists
    if (itemsFile.exists()) {
        try (BufferedReader br = new BufferedReader(new FileReader(itemsFile))) {
            String line = br.readLine(); // Read the header
            if (line != null) {
                String[] headers = line.split(","); // Split the header for column names
                DefaultTableModel model = new DefaultTableModel(headers, 0); // Create a model with headers

                // Loop through each line in the file (after the header)
                while ((line = br.readLine()) != null) {
                    String[] row = line.split(","); // Split each row by commas

                    // Check if the quantity (second to last column) is less than 50
                    try {
                        int quantity = Integer.parseInt(row[2].trim()); // Assuming Quantity is in the third column (index 2)
                        if (quantity < 50) {
                            model.addRow(row); // Add row to the model if the quantity is less than 50
                        }
                    } catch (NumberFormatException e) {
                        // Handle invalid quantity format (if any)
                        JOptionPane.showMessageDialog(this, "Invalid quantity format in items file.");
                    }
                }

                // Set the model to the JTable
                Sale_manager_Table.setModel(model);
            }
        } catch (IOException e) {
            // Display an error message if the file reading fails
            JOptionPane.showMessageDialog(this, "Error reading items data: " + e.getMessage());
        }
    } else {
        // Display an error message if the file is not found
        JOptionPane.showMessageDialog(this, "Items file not found.");
    }
    
    
    }//GEN-LAST:event_Check_StockActionPerformed

    private void Sales_ReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sales_ReportActionPerformed
     File itemsFile = new File(FILE_Sale_Report);
    if (itemsFile.exists()) {
        try (BufferedReader br = new BufferedReader(new FileReader(itemsFile))) {
            String line = br.readLine(); // Read the header
            if (line != null) {
                String[] headers = line.split(","); // Split the header for column names
                DefaultTableModel model = new DefaultTableModel(headers, 0); // Create a model with headers

                while ((line = br.readLine()) != null) {
                    String[] row = line.split(","); // Split each row by commas
                    model.addRow(row); // Add row to the model
                }

                Sale_manager_Table.setModel(model); // Set the model to the JTable
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading items data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Items file not found.");
    }

    }//GEN-LAST:event_Sales_ReportActionPerformed

    private void View_ItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_View_ItemsActionPerformed
    File itemsFile = new File(FILE_Item_Inventory);
    
    if (itemsFile.exists()) {
        try (BufferedReader br = new BufferedReader(new FileReader(itemsFile))) {
            String line = br.readLine(); // Read the header
            if (line != null) {
                // Split the header to create column names for the table
                String[] headers = line.split(","); 
                DefaultTableModel model = new DefaultTableModel(headers, 0); // Create a model with headers

                // Loop through each line in the file (after the header)
                while ((line = br.readLine()) != null) {
                    // Split the row by commas
                    String[] row = line.split(",");
                    
                    // Add the row data to the model
                    model.addRow(row);
                }

                // Set the model to the JTable
                Sale_manager_Table.setModel(model);
            }
        } catch (IOException e) {
            // Display an error message if the file reading fails
            JOptionPane.showMessageDialog(this, "Error reading items data: " + e.getMessage());
        }
    } else {
        // Display an error message if the file is not found
        JOptionPane.showMessageDialog(this, "Items file not found.");
    }  
    

    }//GEN-LAST:event_View_ItemsActionPerformed

    private void Purchase_OrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Purchase_OrdersActionPerformed
         String purchaseID = JOptionPane.showInputDialog(this, "Enter Purchase Order ID to verify:");

        if (purchaseID == null || purchaseID.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Purchase Order ID cannot be empty.");
            return;
        }

        File poFile = new File(FILE_Purchase_Order); // Example file where POs are stored
        boolean poFound = false;

        try (BufferedReader br = new BufferedReader(new FileReader(poFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith(purchaseID + ",")) { // Assuming POs are stored as ID,Details
                    poFound = true;
                    break;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading the purchase orders file: " + e.getMessage());
            return;
        }

        if (poFound) {
            JOptionPane.showMessageDialog(this, "Purchase Order " + purchaseID + " verified successfully.");
            // Logic to update status can be added here
        } else {
            JOptionPane.showMessageDialog(this, "Purchase Order ID " + purchaseID + " not found.");
        }
        
        
    }//GEN-LAST:event_Purchase_OrdersActionPerformed

    private void RequisitionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequisitionsActionPerformed
    
    File inventoryFile = new File(FILE_Item_Inventory);
    File requisitionsFile = new File(FILE_Requisitions);

    // Check if the inventory file exists
    if (inventoryFile.exists()) {
        try (BufferedReader br = new BufferedReader(new FileReader(inventoryFile))) {
            String line = br.readLine(); // Read the header
            if (line != null) {
                // Prepare to write to the requisitions file
                FileWriter fw = new FileWriter(requisitionsFile, false); // false to overwrite the file
                BufferedWriter bw = new BufferedWriter(fw);
                
                // Write the header to the requisitions file
                bw.write(line);
                bw.newLine();

                // Loop through each line in the inventory file (after the header)
                while ((line = br.readLine()) != null) {
                    String[] row = line.split(","); // Split each row by commas

                    // Check if the quantity (third column) is less than 50
                    try {
                        int quantity = Integer.parseInt(row[2].trim()); // Assuming Quantity is in the third column (index 2)
                        if (quantity < 50) {
                            // Write the row to the requisitions file if quantity is less than 50
                            bw.write(line);
                            bw.newLine();
                        }
                    } catch (NumberFormatException e) {
                        // Handle invalid quantity format (if any)
                        JOptionPane.showMessageDialog(this, "Invalid quantity format in inventory file.");
                    }
                }

                // Close the BufferedWriter
                bw.close();
                JOptionPane.showMessageDialog(this, "Requisitions file updated successfully.");
            }
        } catch (IOException e) {
            // Handle file reading or writing errors
            JOptionPane.showMessageDialog(this, "Error processing files: " + e.getMessage());
        }
    } else {
        // If the inventory file does not exist
        JOptionPane.showMessageDialog(this, "Inventory file not found.");
    }
    
    }//GEN-LAST:event_RequisitionsActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
    int selectedRow = Sale_manager_Table.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to edit.");
        return;
    }
    Sale_manager_Table.editCellAt(selectedRow, 0); // Puts the first cell in edit mode
    
    
    }//GEN-LAST:event_EditActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
    
    DefaultTableModel model = (DefaultTableModel) Sale_manager_Table.getModel();
    model.addRow(new Object[]{"", "", "", ""}); // Add an empty row with four columns
    }//GEN-LAST:event_AddActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
    int selectedRow = Sale_manager_Table.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        return;
    }
    DefaultTableModel model = (DefaultTableModel) Sale_manager_Table.getModel();
    model.removeRow(selectedRow); // Remove the selected row
    
    
    }//GEN-LAST:event_DeleteActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
    File itemsFile = new File(FILE_Item_Inventory);
    try (BufferedWriter bw = new BufferedWriter(new FileWriter(itemsFile))) {
        DefaultTableModel model = (DefaultTableModel) Sale_manager_Table.getModel();
        // Write the header
        for (int col = 0; col < model.getColumnCount(); col++) {
            bw.write(model.getColumnName(col) + (col == model.getColumnCount() - 1 ? "\n" : ","));
        }
        // Write each row
        for (int row = 0; row < model.getRowCount(); row++) {
            for (int col = 0; col < model.getColumnCount(); col++) {
                bw.write(model.getValueAt(row, col) + (col == model.getColumnCount() - 1 ? "\n" : ","));
            }
        }
        JOptionPane.showMessageDialog(this, "Data saved successfully.");
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage());
    }
    
    }//GEN-LAST:event_SaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sales_Manager_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sales_Manager_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sales_Manager_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sales_Manager_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sales_Manager_page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Check_Stock;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Edit;
    private javax.swing.JButton Purchase_Orders;
    private javax.swing.JButton Requisitions;
    private javax.swing.JTable Sale_manager_Table;
    private javax.swing.JButton Sales_Report;
    private javax.swing.JButton Save;
    private javax.swing.JButton View_Items;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
