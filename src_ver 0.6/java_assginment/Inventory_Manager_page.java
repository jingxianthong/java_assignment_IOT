/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package java_assginment;

import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author thong
 */
public class Inventory_Manager_page extends javax.swing.JFrame {
    
    private static final String FILE_Item_Inventory = "src/User_data/ItemInventory.txt";
    private static final String FILE_Supplier = "src/User_data/Supplier_data.txt";
    private static final String FILE_PurchaseOrder = "src/User_data/PurchaseOrders.txt";
    
    
    

    /**
     * Creates new form Inventory_Manager_page
     */
    public Inventory_Manager_page() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Inventory_manager_Table = new javax.swing.JTable();
        View_Items = new javax.swing.JButton();
        Add_view_items = new javax.swing.JButton();
        Save_view_items = new javax.swing.JButton();
        Edit_view_items = new javax.swing.JButton();
        Delete_view_items = new javax.swing.JButton();
        Views_Supplier = new javax.swing.JButton();
        Supplier_Add_button = new javax.swing.JButton();
        Supplier_Save_button = new javax.swing.JButton();
        Supplier_Edit_button = new javax.swing.JButton();
        Supplier_Delete_button = new javax.swing.JButton();
        View_Stock_Levels = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        Edit = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Updata_Stock_level = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Inventory_manager_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Inventory_manager_Table);

        View_Items.setText("View Items ");
        View_Items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                View_ItemsActionPerformed(evt);
            }
        });

        Add_view_items.setText("Add");
        Add_view_items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_view_itemsActionPerformed(evt);
            }
        });

        Save_view_items.setText("Save");
        Save_view_items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_view_itemsActionPerformed(evt);
            }
        });

        Edit_view_items.setText("Edit");
        Edit_view_items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_view_itemsActionPerformed(evt);
            }
        });

        Delete_view_items.setText("Delete");
        Delete_view_items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_view_itemsActionPerformed(evt);
            }
        });

        Views_Supplier.setText("Views Supplier");
        Views_Supplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Views_SupplierActionPerformed(evt);
            }
        });

        Supplier_Add_button.setText("Add");
        Supplier_Add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Supplier_Add_buttonActionPerformed(evt);
            }
        });

        Supplier_Save_button.setText("Save");
        Supplier_Save_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Supplier_Save_buttonActionPerformed(evt);
            }
        });

        Supplier_Edit_button.setText("Edit");
        Supplier_Edit_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Supplier_Edit_buttonActionPerformed(evt);
            }
        });

        Supplier_Delete_button.setText("Delete");
        Supplier_Delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Supplier_Delete_buttonActionPerformed(evt);
            }
        });

        View_Stock_Levels.setText("View Stock Levels");
        View_Stock_Levels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                View_Stock_LevelsActionPerformed(evt);
            }
        });

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Edit.setText("Edit");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Updata_Stock_level.setText("Updata Stock level");
        Updata_Stock_level.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Updata_Stock_levelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(View_Items)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(Supplier_Add_button)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Supplier_Save_button))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(Supplier_Edit_button)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Supplier_Delete_button)))
                    .addComponent(Views_Supplier)
                    .addComponent(View_Stock_Levels)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Add)
                        .addGap(18, 18, 18)
                        .addComponent(Save))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Edit)
                        .addGap(18, 18, 18)
                        .addComponent(Delete))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Add_view_items)
                            .addComponent(Edit_view_items))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Save_view_items)
                            .addComponent(Delete_view_items)))
                    .addComponent(Updata_Stock_level))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(View_Items)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Add_view_items)
                    .addComponent(Save_view_items))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Edit_view_items)
                    .addComponent(Delete_view_items))
                .addGap(38, 38, 38)
                .addComponent(Views_Supplier)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Supplier_Add_button)
                    .addComponent(Supplier_Save_button))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Supplier_Edit_button)
                    .addComponent(Supplier_Delete_button))
                .addGap(39, 39, 39)
                .addComponent(View_Stock_Levels)
                .addGap(16, 16, 16)
                .addComponent(Updata_Stock_level)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Add)
                    .addComponent(Save))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Edit)
                    .addComponent(Delete))
                .addGap(141, 141, 141))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void View_ItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_View_ItemsActionPerformed
     File itemsFile = new File(FILE_Item_Inventory);
    if (itemsFile.exists()) {
        try (BufferedReader br = new BufferedReader(new FileReader(itemsFile))) {
            String line = br.readLine(); // Read the header
            if (line != null) {
                String[] headers = line.split(","); // Split the header for column names
                DefaultTableModel model = new DefaultTableModel(headers, 0); // Create a model with headers

                while ((line = br.readLine()) != null) {
                    String[] row = line.split(","); // Split each row by commas
                    model.addRow(row); // Add row to the model
                }

                Inventory_manager_Table.setModel(model); // Set the model to the JTable
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading items data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Items file not found.");
    }
    
    }//GEN-LAST:event_View_ItemsActionPerformed

    private void Views_SupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Views_SupplierActionPerformed
        // TODO add your handling code here:
File suppliersFile = new File(FILE_Supplier);

if (suppliersFile.exists()) {
    try (BufferedReader br = new BufferedReader(new FileReader(suppliersFile))) {
        // Define table headers
        String[] headers = {"Supplier ID", "Name", "Contact Number"};
        DefaultTableModel model = new DefaultTableModel(headers, 0);

        String line;
        int invalidCount = 0;

        // Read the file line by line
        while ((line = br.readLine()) != null) {
            line = line.trim(); // Remove extra spaces

            // Skip empty lines
            if (line.isEmpty()) {
                continue;
            }

            // Split the line using "," as a delimiter
            String[] parts = line.split(",");

            if (parts.length >= 4) { // Ensure there are at least 4 parts
                String supplierID = parts[0].trim();
                String name = parts[1].trim();
                String contactNumber = parts[3].trim(); // Use Contact Number (index 3)

                // Add valid rows to the table
                model.addRow(new String[]{supplierID, name, contactNumber});
            } else {
                // Track invalid rows
                invalidCount++;
            }
        }

        // Update the table
        Inventory_manager_Table.setModel(model);

        // Show warning if there were invalid rows
        if (invalidCount > 0) {
            JOptionPane.showMessageDialog(this, invalidCount + " invalid rows found in the file.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Suppliers data loaded successfully.");
        }

    } catch (IOException e) {
        // Handle file reading errors
        JOptionPane.showMessageDialog(this, "Error reading suppliers data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
} else {
    JOptionPane.showMessageDialog(this, "Suppliers file not found.", "File Not Found", JOptionPane.WARNING_MESSAGE);
}
    
    }//GEN-LAST:event_Views_SupplierActionPerformed

    private void View_Stock_LevelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_View_Stock_LevelsActionPerformed
    // Path to the inventory file
     File itemsFile = new File(FILE_Item_Inventory);
    if (itemsFile.exists()) {
        try (BufferedReader br = new BufferedReader(new FileReader(itemsFile))) {
            String line = br.readLine(); // Read the header
            if (line != null) {
                String[] headers = line.split(","); // Split the header for column names
                DefaultTableModel model = new DefaultTableModel(headers, 0); // Create a model with headers

                while ((line = br.readLine()) != null) {
                    String[] row = line.split(","); // Split each row by commas
                    model.addRow(row); // Add row to the model
                }

                Inventory_manager_Table.setModel(model); // Set the model to the JTable
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading items data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Items file not found.");
    }
    
    }//GEN-LAST:event_View_Stock_LevelsActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed

        DefaultTableModel model = (DefaultTableModel) Inventory_manager_Table.getModel();
        model.addRow(new Object[]{"", "", "", ""}); // Add an empty row with four columns
    }//GEN-LAST:event_AddActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        int selectedRow = Inventory_manager_Table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to edit.");
            return;
        }
        Inventory_manager_Table.editCellAt(selectedRow, 0); // Puts the first cell in edit mode
    }//GEN-LAST:event_EditActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        File itemsFile = new File(FILE_PurchaseOrder);
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(itemsFile))) {
            DefaultTableModel model = (DefaultTableModel) Inventory_manager_Table.getModel();
            // Write the header
            for (int col = 0; col < model.getColumnCount(); col++) {
                bw.write(model.getColumnName(col) + (col == model.getColumnCount() - 1 ? "\n" : ","));
            }
            // Write each row
            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 0; col < model.getColumnCount(); col++) {
                    bw.write(model.getValueAt(row, col) + (col == model.getColumnCount() - 1 ? "\n" : ","));
                }
            }
            JOptionPane.showMessageDialog(this, "Data saved successfully.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage());
        }
    }//GEN-LAST:event_SaveActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        int selectedRow = Inventory_manager_Table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) Inventory_manager_Table.getModel();
        model.removeRow(selectedRow); // Remove the selected row
    }//GEN-LAST:event_DeleteActionPerformed

    private void Save_view_itemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_view_itemsActionPerformed
        // TODO add your handling code here:
        File itemsFile = new File(FILE_Item_Inventory);
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(itemsFile))) {
            DefaultTableModel model = (DefaultTableModel) Inventory_manager_Table.getModel();
            // Write the header
            for (int col = 0; col < model.getColumnCount(); col++) {
                bw.write(model.getColumnName(col) + (col == model.getColumnCount() - 1 ? "\n" : ","));
            }
            // Write each row
            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 0; col < model.getColumnCount(); col++) {
                    bw.write(model.getValueAt(row, col) + (col == model.getColumnCount() - 1 ? "\n" : ","));
                }
            }
            JOptionPane.showMessageDialog(this, "Data saved successfully.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage());
        }
        
    }//GEN-LAST:event_Save_view_itemsActionPerformed

    private void Delete_view_itemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_view_itemsActionPerformed
        // TODO add your handling code here:
        int selectedRow = Inventory_manager_Table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) Inventory_manager_Table.getModel();
        model.removeRow(selectedRow); // Remove the selected row
        
    }//GEN-LAST:event_Delete_view_itemsActionPerformed

    private void Add_view_itemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_view_itemsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) Inventory_manager_Table.getModel();
        model.addRow(new Object[]{"", "", "", ""}); // Add an empty row with four columns        
    }//GEN-LAST:event_Add_view_itemsActionPerformed

    private void Edit_view_itemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_view_itemsActionPerformed
        int selectedRow = Inventory_manager_Table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to edit.");
            return;
        }
        Inventory_manager_Table.editCellAt(selectedRow, 0); // Puts the first cell in edit mode
        
    }//GEN-LAST:event_Edit_view_itemsActionPerformed

    private void Supplier_Save_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Supplier_Save_buttonActionPerformed
        // TODO add your handling code here:
        File itemsFile = new File(FILE_Supplier);
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(itemsFile))) {
            DefaultTableModel model = (DefaultTableModel) Inventory_manager_Table.getModel();
            // Write the header
            for (int col = 0; col < model.getColumnCount(); col++) {
                bw.write(model.getColumnName(col) + (col == model.getColumnCount() - 1 ? "\n" : ","));
            }
            // Write each row
            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 0; col < model.getColumnCount(); col++) {
                    bw.write(model.getValueAt(row, col) + (col == model.getColumnCount() - 1 ? "\n" : ","));
                }
            }
            JOptionPane.showMessageDialog(this, "Data saved successfully.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage());
        }
        
    }//GEN-LAST:event_Supplier_Save_buttonActionPerformed

    private void Supplier_Delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Supplier_Delete_buttonActionPerformed
        // TODO add your handling code here:
        int selectedRow = Inventory_manager_Table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) Inventory_manager_Table.getModel();
        model.removeRow(selectedRow); // Remove the selected row
        
    }//GEN-LAST:event_Supplier_Delete_buttonActionPerformed

    private void Supplier_Add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Supplier_Add_buttonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) Inventory_manager_Table.getModel();
        model.addRow(new Object[]{"", "", "", ""}); // Add an empty row with four columns  
        
    }//GEN-LAST:event_Supplier_Add_buttonActionPerformed

    private void Supplier_Edit_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Supplier_Edit_buttonActionPerformed
        // TODO add your handling code here:
        int selectedRow = Inventory_manager_Table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to edit.");
            return;
        }
        Inventory_manager_Table.editCellAt(selectedRow, 0); // Puts the first cell in edit mode
        
    }//GEN-LAST:event_Supplier_Edit_buttonActionPerformed

    private void Updata_Stock_levelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Updata_Stock_levelActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_Updata_Stock_levelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inventory_Manager_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inventory_Manager_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inventory_Manager_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inventory_Manager_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inventory_Manager_page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Add_view_items;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Delete_view_items;
    private javax.swing.JButton Edit;
    private javax.swing.JButton Edit_view_items;
    private javax.swing.JTable Inventory_manager_Table;
    private javax.swing.JButton Save;
    private javax.swing.JButton Save_view_items;
    private javax.swing.JButton Supplier_Add_button;
    private javax.swing.JButton Supplier_Delete_button;
    private javax.swing.JButton Supplier_Edit_button;
    private javax.swing.JButton Supplier_Save_button;
    private javax.swing.JButton Updata_Stock_level;
    private javax.swing.JButton View_Items;
    private javax.swing.JButton View_Stock_Levels;
    private javax.swing.JButton Views_Supplier;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
